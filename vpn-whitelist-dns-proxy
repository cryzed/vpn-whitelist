#!/usr/bin/env python

import argparse
import collections
import dataclasses
import enum
import functools
import re
import socket
import socketserver
import struct
import subprocess
import sys
import typing as T
from datetime import datetime

# https://en.wikipedia.org/wiki/Domain_Name_System#Structure
# http://www.tcpipguide.com/free/t_DNSMessageHeaderandQuestionSectionFormat.htm

MAX_UDP_SIZE = 65536
DNS_HEADER_STRUCT_FORMAT = "!2s2sHHHH"
DNS_HEADER_SIZE = struct.calcsize(DNS_HEADER_STRUCT_FORMAT)
DNS_LABEL_SIZE_STRUCT_FORMAT = "!B"
DNS_LABEL_SIZE_SIZE = struct.calcsize(DNS_LABEL_SIZE_STRUCT_FORMAT)
DNS_LABEL_POINTER_STRUCT_FORMAT = "!H"
DNS_LABEL_POINTER_SIZE = struct.calcsize(DNS_LABEL_POINTER_STRUCT_FORMAT)
DNS_LABEL_POINTER_MASK = 0b0011111111111111
DNS_LABEL_ENCODING = "ASCII"
DNS_QUESTION_RECORD_STRUCT_FORMAT = "!HH"
DNS_QUESTION_RECORD_SIZE = struct.calcsize(DNS_QUESTION_RECORD_STRUCT_FORMAT)
DNS_RESOURCE_RECORD_STRUCT_FORMAT = "!HHiH"
DNS_RESOURCE_RECORD_STRUCT_SIZE = struct.calcsize(DNS_RESOURCE_RECORD_STRUCT_FORMAT)
DNS_A_RECORD_STRUCT_FORMAT = "!BBBB"

whitelisted: T.Set[str] = set()


def get_argument_parser() -> argparse.ArgumentParser:
    # noinspection PyShadowingNames
    parser = argparse.ArgumentParser(
        description='Unrecognized arguments will be forwarded to "vpn-whitelist"',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument("remote_host", help="Remote DNS host")
    parser.add_argument(
        "regexes",
        nargs="*",
        default=[],
        help="Regular expressions used to match queried addresses",
    )
    parser.add_argument("-H", "--host", default="localhost", help="Address to bind to")
    parser.add_argument("-p", "--port", type=int, default=53, help="Port to listen on")
    parser.add_argument(
        "-P", "--remote-port", type=int, default=53, help="Remote DNS port"
    )
    parser.add_argument(
        "-k",
        "--keep",
        action="store_true",
        help="Don't remove whitelisted addresses during exit",
    )
    return parser


class ExitCode(enum.IntEnum):
    Success = 0
    Failure = 1


@dataclasses.dataclass
class DNSHeader:
    id_: bytes
    flags: bytes
    qdcount: int
    ancount: int
    nscount: int
    arcount: int


@dataclasses.dataclass
class DNSQuestionRecord:
    name: str
    type_: int
    class_: int


@dataclasses.dataclass
class DNSResourceRecord:
    name: str
    type_: int
    class_: int
    ttl: int
    rdlength: int
    rdata: bytes


RecordType = T.Union[DNSQuestionRecord, DNSResourceRecord]


@dataclasses.dataclass
class DNSMessage:
    header: DNSHeader
    question_records: T.List[DNSQuestionRecord]
    answer_records: T.List[DNSResourceRecord]
    authority_records: T.List[DNSResourceRecord]
    additional_records: T.List[DNSResourceRecord]


def parse_dns_header(data: bytes) -> T.Tuple[DNSHeader, int]:
    header = DNSHeader(*struct.unpack_from(DNS_HEADER_STRUCT_FORMAT, data))
    return header, DNS_HEADER_SIZE


@functools.lru_cache
def parse_dns_name_notation(data: bytes, offset: int = 0) -> T.Tuple[T.Union[str], int]:
    labels = []

    while True:
        label_size = struct.unpack_from(DNS_LABEL_SIZE_STRUCT_FORMAT, data, offset)[0]
        is_pointer = label_size >= 192
        if is_pointer:
            pointer = (
                struct.unpack_from(DNS_LABEL_POINTER_STRUCT_FORMAT, data, offset)[0]
                & DNS_LABEL_POINTER_MASK
            )
            offset += DNS_LABEL_POINTER_SIZE
            label = parse_dns_name_notation(data, pointer)[0]
            labels.append(label)
            break

        offset += DNS_LABEL_SIZE_SIZE

        is_root_label = label_size == 0
        if is_root_label:
            break

        label_struct_format = f"!{label_size}s"
        label_bytes = struct.unpack_from(label_struct_format, data, offset)[0]
        label = label_bytes.decode(DNS_LABEL_ENCODING)
        labels.append(label)
        offset += struct.calcsize(label_struct_format)

    return ".".join(labels), offset


def parse_dns_question_record(
    data: bytes, offset: int = 0
) -> T.Tuple[DNSQuestionRecord, int]:
    name, offset = parse_dns_name_notation(data, offset)
    type_, class_ = struct.unpack_from(DNS_QUESTION_RECORD_STRUCT_FORMAT, data, offset)
    return DNSQuestionRecord(name, type_, class_), offset + DNS_QUESTION_RECORD_SIZE


def parse_dns_resource_record(
    data: bytes, offset: int = 0
) -> T.Tuple[DNSResourceRecord, int]:
    name, offset = parse_dns_name_notation(data, offset)
    type_, class_, ttl, rdlength = struct.unpack_from(
        DNS_RESOURCE_RECORD_STRUCT_FORMAT, data, offset
    )
    rdata_format = f"!{rdlength}s"
    offset += DNS_RESOURCE_RECORD_STRUCT_SIZE
    rdata = struct.unpack_from(rdata_format, data, offset)[0]
    rdata_format_size = struct.calcsize(rdata_format)

    return (
        DNSResourceRecord(name, type_, class_, ttl, rdlength, rdata),
        offset + rdata_format_size,
    )


def parse_dns_question_records(
    data: bytes, count: int, offset: int = 0
) -> T.Tuple[T.List[DNSQuestionRecord], int]:
    questions = []
    for _ in range(count):
        record, offset = parse_dns_question_record(data, offset)
        questions.append(record)
    return questions, offset


def parse_dns_resource_records(
    data: bytes, count: int, offset: int = 0
) -> T.Tuple[T.List[DNSResourceRecord], int]:
    records = []
    for _ in range(count):
        record, offset = parse_dns_resource_record(data, offset)
        records.append(record)
    return records, offset


def parse_dns_message(data: bytes) -> DNSMessage:
    header, offset = parse_dns_header(data)
    questions, offset = parse_dns_question_records(data, header.qdcount, offset)
    answers, offset = parse_dns_resource_records(data, header.ancount, offset)
    authorities, offset = parse_dns_resource_records(data, header.nscount, offset)
    additionals, offset = parse_dns_resource_records(data, header.arcount, offset)
    return DNSMessage(header, questions, answers, authorities, additionals)


def get_dns_a_record_data(record: DNSResourceRecord) -> str:
    if record.type_ != 1:
        raise ValueError(f"wrong record type: {type!r}")

    quads = struct.unpack_from(DNS_A_RECORD_STRUCT_FORMAT, record.rdata)
    return ".".join(str(octet) for octet in quads)


# noinspection PyShadowingNames
def vpn_whitelist(addresses: T.List[str], arguments: T.List[str]) -> None:
    command = ["vpn-whitelist", *addresses, *arguments]
    print(" ".join(command))
    subprocess.run(command)


stderr = functools.partial(print, file=sys.stderr)


class DNSProxyHandler(socketserver.BaseRequestHandler):
    def __init__(
        self,
        remote_address: T.Tuple[str, int],
        regexes: T.List[str],
        vpn_whitelist_arguments: T.List[str],
        *args: T.Any,
        **kwargs: T.Any,
    ):
        self.remote_address = remote_address

        # TODO: Move this out of the constructor
        self.regexes = [re.compile(regex, re.IGNORECASE) for regex in regexes]
        self.vpn_whitelist_arguments = vpn_whitelist_arguments

        self.remote_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        super().__init__(*args, **kwargs)

    def handle(self) -> None:
        local_received, local_socket = self.request[:2]
        self.remote_socket.sendto(local_received, self.remote_address)
        remote_received = self.remote_socket.recv(MAX_UDP_SIZE)
        query_message = parse_dns_message(local_received)
        stderr("Query:", [q.name for q in query_message.question_records])

        reply_message = parse_dns_message(remote_received)
        name_to_a_record = collections.defaultdict(set)
        for answer in reply_message.answer_records:
            if answer.type_ == 1:
                ip = get_dns_a_record_data(answer)
                name_to_a_record[answer.name].add(ip)

        stderr("Reply:", dict(name_to_a_record), end="\n\n")

        for name, ips in name_to_a_record.items():
            if not any(regex.match(name) for regex in self.regexes):
                continue

            not_whitelisted = ips - whitelisted
            if not not_whitelisted:
                continue

            # noinspection PyShadowingNames
            arguments = self.vpn_whitelist_arguments.copy()
            time_string = datetime.now().isoformat(sep=" ", timespec="seconds")
            arguments.extend(
                ["--comment", f"Whitelist DNS Proxy {name} ({time_string})"]
            )

            vpn_whitelist(sorted(not_whitelisted), arguments)
            whitelisted.update(not_whitelisted)

        local_socket.sendto(remote_received, self.client_address)


def get_dns_proxy_handler_factory(
    remote_address: T.Tuple[str, int],
    regexes: T.List[str],
    vpn_whitelist_arguments: T.List[str],
) -> T.Callable[..., DNSProxyHandler]:
    def factory(*args: T.Any, **kwargs: T.Any) -> DNSProxyHandler:
        return DNSProxyHandler(
            remote_address, regexes, vpn_whitelist_arguments, *args, **kwargs
        )

    return factory


# noinspection PyShadowingNames
def main(
    arguments: argparse.Namespace, vpn_whitelist_arguments: T.List[str]
) -> ExitCode:
    local_address = arguments.host, arguments.port
    remote_address = arguments.remote_host, arguments.remote_port
    factory = get_dns_proxy_handler_factory(
        remote_address, arguments.regexes, vpn_whitelist_arguments
    )

    with socketserver.ThreadingUDPServer(local_address, factory) as server:
        try:
            server.serve_forever()
        except KeyboardInterrupt:
            stderr("Aborting...")

    if not arguments.keep:
        remove_vpn_whitelist_arguments = vpn_whitelist_arguments.copy()
        remove_vpn_whitelist_arguments.append("--remove")
        vpn_whitelist(sorted(whitelisted), remove_vpn_whitelist_arguments)

    return ExitCode.Success


if __name__ == "__main__":
    parser = get_argument_parser()
    arguments, rest = parser.parse_known_args()
    parser.exit(main(arguments, rest))
